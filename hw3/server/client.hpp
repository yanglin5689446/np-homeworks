 client.hpp #ifndef CLIENT_Hclient.hpp #define CLIENT_Hclient.hpp client.hpp #include <stdio.h>  client.hpp #include <stdlib.h>client.hpp #include <string.h>  client.hpp #include <unistd.h>  client.hpp #include <arpa/inet.h>  client.hpp #include <sys/types.h>  client.hpp #include <sys/socket.h>  client.hpp #include <netinet/in.h>  client.hpp #include <iostream>client.hpp #include <string>client.hpp #include <fstream>client.hpp #include <functional>client.hpp #include <sstream>client.hpp using namespace std;client.hpp client.hpp #define BUFFER_SIZE 16384client.hpp client.hpp class Client{client.hpp public:client.hpp     Client(std::string addr, int port, const string& name) : name(name){client.hpp         server_addr.sin_family = AF_INET;  client.hpp         inet_pton(AF_INET, addr.c_str(), &server_addr.sin_addr);client.hpp         server_addr.sin_port = htons(port);  client.hpp         server = socket(AF_INET, SOCK_STREAM, 0);  client.hpp         FD_ZERO(&available);client.hpp     }client.hpp     void establishConnection(){client.hpp         connect(server, (struct sockaddr *)&server_addr, sizeof(server_addr));  client.hpp         connecting = true;client.hpp         init_connection_handler(*this);client.hpp         while(connecting){client.hpp             // add server and stdin to fd setclient.hpp             FD_SET(server, &available);client.hpp             FD_SET(STDIN_FILENO, &available);client.hpp             if(select(server + 1, &available, NULL, NULL, NULL) < 0){client.hpp                 perror("select error.\n");client.hpp                 exit(1);client.hpp             }client.hpp             // handling server fdclient.hpp             if(FD_ISSET(server, &available)){client.hpp                 memset(buffer, 0, sizeof(buffer));client.hpp                 int n = read(server, buffer, BUFFER_SIZE);client.hpp                 if(n < 0){client.hpp                     perror("read server message error.\n");client.hpp                     exit(1);client.hpp                 }client.hpp                 message = buffer;client.hpp                 server_response_handler(*this, message);client.hpp             }client.hpp             // handling server stdin client.hpp             if(FD_ISSET(STDIN_FILENO, &available)){client.hpp                 memset(buffer, 0, sizeof(buffer));client.hpp                 int n = read(STDIN_FILENO, buffer, sizeof(buffer)); client.hpp                 if(n <= 0){client.hpp                     perror("read from stdin failed.\n");client.hpp                     exit(1);client.hpp                 }client.hpp                 input = buffer;client.hpp                 if(input.length() > 1)input.pop_back();client.hpp                 client_input_handler(*this, input);client.hpp             }client.hpp         }client.hpp         close(server);  client.hpp     }client.hpp client.hpp     void registerInitConnectionHandler(function<void(Client&)> f){ client.hpp         init_connection_handler = f;client.hpp     }client.hpp     void registerServerResponseHandler(function<void(Client&, const std::string&)> f){ client.hpp         server_response_handler = f;client.hpp     }client.hpp     void registerClientInputHandler(function<void(Client&, const std::string&)> f){ client.hpp         client_input_handler = f;client.hpp     }client.hpp     void endConnection(){client.hpp         connecting = false;client.hpp     }client.hpp     void writeToServer(string s){client.hpp         write(server, s.c_str(), s.length());client.hpp     }client.hpp     void writeFile(string file_name){client.hpp         // open file and send client.hpp         fstream file(file_name, fstream::in | fstream::binary);client.hpp         while(file){client.hpp             file.getline(buffer, BUFFER_SIZE);client.hpp             string packet = file_name + " " + buffer;client.hpp             cout << packet.length() << endl;client.hpp             write(server, packet.c_str(), packet.length());client.hpp         }client.hpp         file.close();client.hpp     }client.hpp client.hpp protected:client.hpp 	int server;  client.hpp     int connecting;client.hpp     sockaddr_in server_addr;client.hpp     char buffer[BUFFER_SIZE];client.hpp     std::string message;client.hpp     std::string input;client.hpp     std::string name;client.hpp     fd_set available;client.hpp     function<void(Client&)> init_connection_handler; client.hpp     function<void(Client&, const std::string&)> server_response_handler; client.hpp     function<void(Client&, const std::string&)> client_input_handler; client.hpp };client.hpp #endifclient.hpp 